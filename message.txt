import React, { useState } from "react"
import "./SignupForm.css"

export function SignupForm({ onSubmit }) {
    const [test, setTest] = useState({
        email: '',
        password: '',
        passwordConfirmation: '',
        acceptsTerms: false,
        acceptsCommunications: false
    })

    function handleSubmit(e) {
        if (!emailerror(test.email) && !passerror(test.password) && !passcom(test.password, test.passwordConfirmation) && !terms(test.acceptsTerms)) {
            onSubmit(test)
        }
        else {
            e.preventDefault()
        }
    }

    const [pass, setPass] = useState(false)
    const [passc, setPassc] = useState(false)

    return (<div>
        <form method="get" onSubmit={(e) => handleSubmit(e)}>

            <div>
                <label>
                    Email: <input type="text" data-testid="email" onChange={(e) => setTest((t) => { return { ...t, email: e.target.value } })} />
                </label>
            </div>

            <div>
                <label>
                    Password:<input type={pass ? "text" : "password"} data-testid="password" onChange={(e) => setTest((t) => { return { ...t, password: e.target.value } })} />
                </label>
                <span><button type="button" data-testid="password-toggle" onClick={() => setPass((e) => !e)}>Show</button></span>
                <span>str: </span><span data-testid="password-strength">{checkPasswordStrength(test.password)}</span>
            </div>

            <div>
                <label>
                    Password Confirmation:<input type={passc ? "text" : "password"} data-testid="passwordConfirmation" onChange={(e) => setTest((t) => { return { ...t, passwordConfirmation: e.target.value } })} />
                </label>
                <span><button type="button" data-testid="passwordConfirmation-toggle" onClick={() => setPassc((e) => !e)}>Show</button></span>
            </div>

            <div>
                <label>
                    Terms:<input type="checkbox" data-testid="acceptsTerms" onChange={(e) => setTest((t) => { return { ...t, acceptsTerms: e.target.checked } })} />
                </label>
            </div>

            <div>
                <label>
                    Communications<input type="checkbox" data-testid="acceptsCommunications" onChange={(e) => setTest((t) => { return { ...t, acceptsCommunications: e.target.checked } })} />
                </label>
            </div>
            <div>
                <input type="submit" data-testid="submit" value="Send" />
            </div>

            {emailerror(test.email)}
            {passerror(test.password)}
            {passcom(test.password, test.passwordConfirmation)}
            {terms(test.acceptsTerms)}
            {Comms(test.acceptsCommunications)}
        </form></div>)
}


function emailerror(email) {
    if (email.length == 0) {
        return (<div>
            <span data-testid="email-error">Por favor introduza o seu endereço de email.</span>
        </div>)
    }
    else if (!validateEmail(email)) {
        return (<div>
            <span data-testid="email-error">Por favor introduza um endereço de email válido.</span>
        </div>
        )
    }
}

function passerror(pass) {
    if (pass.length == 0) {
        return (<div>
            <span data-testid="password-error">Por favor introduza a sua password.</span>
        </div>)
    }
    else if (pass.length < 8) {
        return (<div>
            <span data-testid="password-error">A sua password deve ter no mínimo 8 caracteres.</span>
        </div>)
    }
    else if (checkPasswordStrength(pass) < 4) {
        return (<div>
            <span data-testid="password-error">A sua password deve ter pelo menos um número, uma mínuscula, uma maiúscula e um símbolo.</span>
        </div>)
    }
}

function passcom(pass1, pass2) {
    if (pass2.length == 0) {
        return (<div>
            <span data-testid="passwordConfirmation-error">Por favor introduza novamente a sua password.</span>
        </div>)
    }
    else if (pass1 != pass2) {
        return (<div>
            <span data-testid="passwordConfirmation-error">As passwords não coincidem.</span>
        </div>)
    }
}

function terms(termo) {
    if (!termo) {
        return (<div>
            <span data-testid="acceptsTerms-error">Tem de aceitar os termos e condições para criar a sua conta.</span>
        </div>)
    }
}

function Comms(com) {
    if (!com) {
        return (<div>
            <span data-testid="acceptsCommunications-error"></span>
        </div>)
    }
}

function validateEmail(email) {
    // Esta expressão regular não garante que email existe, nem que é válido
    // No entanto deverá funcionar para a maior parte dos emails que seja necessário validar.
    const EMAIL_REGEX = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    return EMAIL_REGEX.test(email)
}

function checkPasswordStrength(password) {
    if (password.length < 8) return 0;
    const regexes = [
        /[a-z]/,
        /[A-Z]/,
        /[0-9]/,
        /[~!@#$%^&*)(+=._-]/
    ]
    return regexes
        .map(re => re.test(password))
        .reduce((score, t) => t ? score + 1 : score, 0)
}